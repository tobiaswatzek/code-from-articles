// +build ignore

package main

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"path"

	j "github.com/dave/jennifer/jen"
)

func main() {
	render(path.Join(".", "pet.go"), "Pet", "main", []string{
		"cat",
		"dog",
		"pig",
	})
}

func render(filePath string, enumTypeName string, packageName string, enumValues []string) {
	buf := &bytes.Buffer{}
	if err := generateEnumCode(enumTypeName, packageName, enumValues, buf); err != nil {
		panic(err)
	}
	if err := ioutil.WriteFile(filePath, buf.Bytes(), 0644); err != nil {
		panic(err)
	}
}

func generateEnumCode(enumTypeName string, packageName string, enumValues []string, w io.Writer) error {
	toStringName := fmt.Sprintf("toString%s", enumTypeName)
	toIdName := fmt.Sprintf("toId%s", enumTypeName)
	f := j.NewFilePath(packageName)

	f.HeaderComment("Code generated by a tool DO NOT EDIT.")

	f.Type().Id(enumTypeName).Int()
	f.Const().DefsFunc(func(g *j.Group) {
		for i := range enumValues {
			s := g.Id(enumValues[i])
			if i == 0 {
				s.Id(enumTypeName).Op("=").Iota()
			}
		}
	})

	f.Func().Params(j.Id("s").Id(enumTypeName)).Id("String").Params().String().BlockFunc(func(g *j.Group) {
		g.Return(j.Id(toStringName).Index(j.Id("s")))
	})

	f.Var().Id(toStringName).Op("=").Map(j.Id(enumTypeName)).String().Values(j.DictFunc(func(d j.Dict) {
		for i := range enumValues {
			enumValue := enumValues[i]
			d[j.Id(enumValue)] = j.Lit(enumValue)
		}
	}))

	f.Var().Id(toIdName).Op("=").Map(j.String()).Id(enumTypeName).Values(j.DictFunc(func(d j.Dict) {
		for i := range enumValues {
			enumValue := enumValues[i]
			d[j.Lit(enumValue)] = j.Id(enumValue)
		}
	}))

	f.Func().Params(j.Id("s").Id(enumTypeName)).Id("MarshalJSON").Params().Params(j.Index().Byte(), j.Error()).BlockFunc(func(g *j.Group) {
		g.Id("buffer").Op(":=").Qual("bytes", "NewBufferString").Call(j.Lit(`"`))
		g.Id("buffer").Dot("WriteString").Call(j.Id(toStringName).Index(j.Id("s")))
		g.Id("buffer").Dot("WriteString").Call(j.Lit(`"`))
		g.Return(j.Id("buffer").Dot("Bytes").Call(), j.Nil())
	})

	f.Func().Params(j.Id("s").Op("*").Id(enumTypeName)).Id("UnmarshalJSON").Params(j.Id("b").Index().Byte()).Error().BlockFunc(func(g *j.Group) {
		g.Var().Id("j").String()
		g.Err().Op(":=").Qual("encoding/json", "Unmarshal").Call(j.Id("b"), j.Op("&").Id("j"))
		g.If(j.Err().Op("!=").Nil()).Block(j.Return(j.Err()))
		g.Op("*").Id("s").Op("=").Id(toIdName).Index(j.Id("j"))
		g.Return(j.Nil())
	})

	return f.Render(w)
}
